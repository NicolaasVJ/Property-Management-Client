
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

public class Property_Window extends javax.swing.JFrame {

    /**
     * Creates new form Property_Window
     */
    
    typeProperty type=new typeProperty();
    HashMap<String,Integer> map =type.getTypesMap();
    
    
    public Property_Window() {
        initComponents();
        
        //populate types in cmb
        this.setTitle("Properties");
        fillCombo();
        populatetblProperties();
    }
    
    private void clearFields(){
        txtId.setText("");
                txtSquareM.setText("");
                txtAddress.setText("");
                txtDescription.setText("");
                txtLevies.setText("");
                txtPrice.setText("");
                txtOwnerId.setText("");
                jSpinner_Bathroom.setValue(0);
                jSpinner_Bedroom.setValue(0);
                jSpinner_Garage.setValue(0);
                chkPetFriendly.setSelected(false);
                chkPool.setSelected(false);
    }
    //function to populate types
    public void fillCombo()
    {
        
        
        for(String s : map.keySet())
        {
            cmbType.addItem(s);
        }
    }
     public void populatetblProperties()
    {
        Property properties= new Property();
        ArrayList<Property> propertyList=properties.propertyList();
        
        String[] colName={"ID","Type","Size","OwnerID","Price","Address","Bedrooms","Bathrooms","Levies","Description","Pool","Pet","Garages"};//col
        Object[][] rows=new Object[propertyList.size()][13];//row and whats in row13 rows
        
        for(int x=0;x<propertyList.size();x++)
        {
            rows[x][0]=propertyList.get(x).getId();
            rows[x][1]=propertyList.get(x).getType();
            rows[x][2]=propertyList.get(x).getSize();
            rows[x][3]=propertyList.get(x).getOwnerId();
            rows[x][4]=propertyList.get(x).getPrice();
            rows[x][5]=propertyList.get(x).getAddress();
            rows[x][6]=propertyList.get(x).getBedroom();
            rows[x][7]=propertyList.get(x).getBathroom();
            rows[x][8]=propertyList.get(x).getLevies();
            rows[x][9]=propertyList.get(x).getDescription();
            rows[x][10]=propertyList.get(x).isPool();
            rows[x][11]=propertyList.get(x).isPet();
            rows[x][12]=propertyList.get(x).getGarage();
           
            
                    
        }
        
        DefaultTableModel model=new DefaultTableModel(rows,colName);
        tblProperty.setModel(model);
        tblProperty.setRowHeight((35));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTitleTP = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtLevies = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        btnAddProperty = new javax.swing.JButton();
        btnEditProperty = new javax.swing.JButton();
        btnRemoveProperty = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtOwnerId = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cmbType = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jSpinner_Bedroom = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jSpinner_Bathroom = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        txtSquareM = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        chkPool = new javax.swing.JCheckBox();
        chkPetFriendly = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jSpinner_Garage = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProperty = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));

        lblTitleTP.setBackground(new java.awt.Color(0, 51, 51));
        lblTitleTP.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        lblTitleTP.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleTP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleTP.setText("Properties");
        lblTitleTP.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(457, 457, 457)
                .addComponent(lblTitleTP, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitleTP, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Type:");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("ID:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Address:");

        txtId.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        txtLevies.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        txtAddress.setColumns(20);
        txtAddress.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        btnAddProperty.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnAddProperty.setText("Add");
        btnAddProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPropertyActionPerformed(evt);
            }
        });

        btnEditProperty.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnEditProperty.setText("Edit");
        btnEditProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPropertyActionPerformed(evt);
            }
        });

        btnRemoveProperty.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnRemoveProperty.setText("Remove");
        btnRemoveProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePropertyActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Price:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Bedrooms:");

        txtOwnerId.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setText("Owner ID:");

        txtPrice.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbType.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("Square Meters:");

        jSpinner_Bedroom.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("Bathrooms:");

        jSpinner_Bathroom.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setText("Levies:");

        txtSquareM.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel11.setText("Description:");

        txtDescription.setColumns(20);
        txtDescription.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        txtDescription.setRows(5);
        jScrollPane2.setViewportView(txtDescription);

        chkPool.setText("Pool");
        chkPool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPoolActionPerformed(evt);
            }
        });

        chkPetFriendly.setText("Pet Friendly");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel10.setText("Garages: ");

        jSpinner_Garage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        tblProperty.getTableHeader().setReorderingAllowed(false);
        tblProperty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPropertyMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblProperty);

        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setText("Refresh Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOwnerId, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSquareM, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel11)
                            .addComponent(jLabel5)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinner_Bedroom, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner_Bathroom, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner_Garage, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLevies, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkPool, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkPetFriendly, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveProperty, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                .addGap(36, 36, 36))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtId)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSquareM))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtOwnerId)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(124, 124, 124))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinner_Bedroom))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkPool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner_Bathroom)
                            .addComponent(chkPetFriendly, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner_Garage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtLevies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAddProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEditProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRemoveProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPropertyActionPerformed
        
        //add property
        
        
        try
        {
            
            int type=map.get(cmbType.getSelectedItem().toString());
            int squareM=Integer.valueOf(txtSquareM.getText());
            int ownerId=Integer.valueOf(txtOwnerId.getText());
            int bedroom=Integer.valueOf(jSpinner_Bedroom.getValue().toString());
            int bathroom=Integer.valueOf(jSpinner_Bathroom.getValue().toString());
             int garage=Integer.valueOf(jSpinner_Garage.getValue().toString());
            int levies=Integer.valueOf(txtLevies.getText());
            
            String price=txtPrice.getText();
            String address=txtAddress.getText();
            String description=txtDescription.getText();
            
            boolean havePool=false;
            boolean havePet=false;

            
            if(chkPool.isSelected()) havePool=true;
            if(chkPetFriendly.isSelected()) havePet=true;
            
            
            Property property = new Property(0, type, squareM, ownerId, price, address, bedroom, bathroom, levies, description, havePool, havePet, garage);
            
            if(new Property().addProperty(property))
            {
                JOptionPane.showMessageDialog(null, "New Property has successfully been added","Add New Property",1);
                clearFields();
                populatetblProperties();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Property not been added","Add New Property",2);
            }
            
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage()+"Error","Invalid Type" ,0);
        }
        
    }//GEN-LAST:event_btnAddPropertyActionPerformed

    private void btnEditPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPropertyActionPerformed
        
        //edit
        try
        {
            int id =Integer.valueOf(txtId.getText());
            int type=map.get(cmbType.getSelectedItem().toString());
            int squareM=Integer.valueOf(txtSquareM.getText());
            int ownerId=Integer.valueOf(txtOwnerId.getText());
            int bedroom=Integer.valueOf(jSpinner_Bedroom.getValue().toString());
            int bathroom=Integer.valueOf(jSpinner_Bathroom.getValue().toString());
            int garage=Integer.valueOf(jSpinner_Garage.getValue().toString());
            int levies=Integer.valueOf(txtLevies.getText());
            
            String price=txtPrice.getText();
            String address=txtAddress.getText();
            String description=txtDescription.getText();
            
            boolean havePool=false;
            boolean havePet=false;
   
            
            if(chkPool.isSelected()) havePool=true;
            if(chkPetFriendly.isSelected()) havePet=true;
           
            
            Property property = new Property(id, type, squareM, ownerId, price, address, bedroom, bathroom, levies, description, havePool, havePet, garage);
            
            if(new Property().editProperty(property))
            {
                JOptionPane.showMessageDialog(null, "Property has successfully been edited","Edit Property",1);
                populatetblProperties();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Property not been edited","Edit Property",2);
            }
            
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage()+"Error","Invalid Type" ,0);
        }
        
        
        
    }//GEN-LAST:event_btnEditPropertyActionPerformed

    private void btnRemovePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePropertyActionPerformed
        //remove
       try
        {
            int id=Integer.valueOf(txtId.getText());

             Property property = new Property(id);

             if(new Property().removeProperty(property))
            {
                JOptionPane.showMessageDialog(null, "Property has successfully been deleted","Delete Property",1);
                clearFields();
                populatetblProperties();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Property has not been deleted","Delete Property",2);
            }
            
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage()+"Error","Invalid Type" ,0);
        }
        
    }//GEN-LAST:event_btnRemovePropertyActionPerformed

    private void chkPoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPoolActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPoolActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        //search
        
        try
        {
            int propertyId=Integer.valueOf(txtId.getText());
            Property property = new Property().searchProperty(propertyId);
            
            if(property!=null)
            {
                for(Object type:map.keySet())
                {
                    if(map.get(type).equals(property.getType()))
                    {
                        cmbType.setSelectedItem(type);
                    }
                        
                }
                txtAddress.setText(property.getAddress());
                jSpinner_Bedroom.setValue(property.getBedroom());
                jSpinner_Bathroom.setValue(property.getBathroom());
                jSpinner_Garage.setValue(property.getGarage());
                
                if(property.isPool()) chkPool.setSelected(true);
                if(property.isPet()) chkPetFriendly.setSelected(true);
                                
                txtDescription.setText(property.getDescription());
                txtPrice.setText(property.getPrice());
                txtSquareM.setText(String.valueOf(property.getSize()));
                txtOwnerId.setText(String.valueOf(property.getOwnerId()));
                txtLevies.setText(String.valueOf(property.getLevies()));
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Record not found, try using the table","Invalid ID" ,0);
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage()+"Error","Invalid!" ,0);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblPropertyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPropertyMouseClicked
        int selectedRowIndex = tblProperty.getSelectedRow();
        txtId.setText(tblProperty.getValueAt(selectedRowIndex,0).toString());
        
        
        try
        {
            int propertyId=Integer.valueOf(txtId.getText());
            Property property = new Property().searchProperty(propertyId);
            
            if(property!=null)
            {
                for(Object type:map.keySet())
                {
                    if(map.get(type).equals(property.getType()))
                    {
                        cmbType.setSelectedItem(type);
                    }
                        
                }
                txtAddress.setText(property.getAddress());
                jSpinner_Bedroom.setValue(property.getBedroom());
                jSpinner_Bathroom.setValue(property.getBathroom());
                jSpinner_Garage.setValue(property.getGarage());
                
                if(property.isPool()) chkPool.setSelected(true);
                if(property.isPet()) chkPetFriendly.setSelected(true);
                                
                txtDescription.setText(property.getDescription());
                txtPrice.setText(property.getPrice());
                txtSquareM.setText(String.valueOf(property.getSize()));
                txtOwnerId.setText(String.valueOf(property.getOwnerId()));
                txtLevies.setText(String.valueOf(property.getLevies()));
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Record not found","Invalid ID" ,0);
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage()+"Error","Invalid!" ,0);
        }
         
    }//GEN-LAST:event_tblPropertyMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       fillCombo();
        populatetblProperties();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Property_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Property_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Property_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Property_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Property_Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProperty;
    private javax.swing.JButton btnEditProperty;
    private javax.swing.JButton btnRemoveProperty;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox chkPetFriendly;
    private javax.swing.JCheckBox chkPool;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner_Bathroom;
    private javax.swing.JSpinner jSpinner_Bedroom;
    private javax.swing.JSpinner jSpinner_Garage;
    private javax.swing.JLabel lblTitleTP;
    private javax.swing.JTable tblProperty;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLevies;
    private javax.swing.JTextField txtOwnerId;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSquareM;
    // End of variables declaration//GEN-END:variables
}
